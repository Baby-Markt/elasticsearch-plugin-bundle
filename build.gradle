buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://xbib.org/repository'
        }
    }
    dependencies {
        classpath "org.xbib.elasticsearch:gradle-plugin-elasticsearch-build:6.2.1.0"
    }
}

import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.jflex" version "1.1.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.6.0.0"
}

printf "Date: %s\nHost: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME),
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion, GroovySystem.getVersion(), JavaVersion.current()

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.xbib.gradle.plugin.elasticsearch.plugin'
apply plugin: 'org.xbib.gradle.plugin.jflex'
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

esplugin {
    description 'Plugin bundle for Elasticsearch'
    classname 'org.xbib.elasticsearch.plugin.bundle.BundlePlugin'
    name 'bundle'
    url 'https://github.com/jprante/elasticsearch-plugin-bundle'
}

configurations {
    wagon
}

dependencies {
    compile "com.ibm.icu:icu4j:${project.property('icu4j.version')}"
    compile "org.xbib:standardnumber:${project.property('standardnumber.version')}"
    testCompile "org.apache.logging.log4j:log4j-core:${project.property('log4j.version')}"
    testCompile "org.elasticsearch.plugin:transport-netty4-client:${project.property('elasticsearch.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_8

test {
    include '**/*Test.*'
    systemProperty 'path.home', System.getProperty("user.dir")
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}

esTest {
    include '**/IcuAnalysisTests.*'
}

clean {
    delete "plugins"
    delete "data"
    delete "logs"
}


if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

asciidoctor {
    attributes toc: 'left',
            doctype: 'book',
            icons: 'font',
            encoding: 'utf-8',
            sectlink: true,
            sectanchors: true,
            linkattrs: true,
            imagesdir: 'img',
            'source-highlighter': 'coderay'
}

checkstyleMain.source = 'src/main/java'
forbiddenPatterns.exclude('**/*.txt')
